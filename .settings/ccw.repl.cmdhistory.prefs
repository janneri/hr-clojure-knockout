#Thu Sep 13 00:00:42 EEST 2012
cmdhistory=[";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/server.clj" ";; Switching to hr.server namespace" "(clojure.core/in-ns 'hr.server)" "lein run" "main" "-main" "+ 1 1" "lein run" "-main" "(-main)" "(\:meta swap\!)" "(doc swap\!)" "(doc inc)" "(list-departments)" "(get 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'hr.views.welcome)))" "(list-departments)" "(-main)" "(reload)" "(list-departments)" "(\:use hr.views.welcome \:as w)" "(-main)" "(list-departments)" "(\:use [hr.views.welcome] \:as w)" "(\:use [hr.views.welcome \:as w])" "(list-departments)" "(def foo {\:name \\"testi\\"})" "(foo)" "(get foo \:name)" "(assoc foo \:emps [])" "(def foo {\:departments\: [{\:id 1 \:name \\"testi\\"}]})" "(def foo {\:departments [{\:id 1 \:name \\"testi\\"}]})" "(def foo [{\:id 1 \:name \\"testi\\"}])" "(foo)" "(foo 1)" "(foo 0)" "(doc cons)" "(foo)" "({\:name \\"kakka\\" \:id 2} foo)" "(print foo)" "(def foo2 ({\:name \\"kakka\\" \:id 2} foo))" "(print foo2)" "(def foo2 (cons {\:name \\"kakka\\" \:id 2} foo))" "(print foo2)" "(count foo2)" "(foo 1)" "(foo2 1)" "(foo2 0)" "(foo2)" "(count foo2)" "(first foo2)" "(last foo2)" "(print foo2)" "(foo2 1)" "(filter \#(\:id\=\=1) foo2)" "(foo \:name)" "(get foo \:name)" "(foo)" "(foo 0)" "(\:name foo)" "(get \:name foo)" "(get foo \:id)" "(get foo 1)" "(doc get\\n     )" "(filter \#((% \:id)\=\=1) foo2)" "(filter \#(\= (% \:id) 1) foo2)" "(first (filter \#(\= (% \:id) 1) foo2))" "(def paska {})" "(print paska)" "(assoc paska 1 {\:name \\"testi\\"})" "(get paska 1)" "(get-in paska 1)" "(keyes paska)" "(def paska (assoc paska 1 {\:name \\"testi\\"}))" "(keys paska)" "(get paska 1)" "(def paska1 (assoc-in paska [1 \:emps] [\:firstname \\"janne\\"]))" "(print paska1)" "(get paska 1)" "(-> paska1 1 \:emps)" "(get-in paska1 1)" "(get paska1 1)" "(get-in paska1 \:\\n     1)" "(get-in paska1 \:1)" "(get-in paska1 [1])" "(-> paska1 [1])" "(-> paska1 1)" "(get-in paska1 [1 \:emps])" "(print paska1)" "(def paska2 (update-in paska1 [1 \:emps] (cons {\:firstname \\"toinen\\"})))" "(def paska2 (update-in paska1 [1 \:emps] cons {\:firstname \\"toinen\\"}))" "(print paska2)" "(def lista [])" "(cons lista 1)" "(cons 1 lista)" "(cons 2 lista)" "(cons 2 2 lista)" "(def emp {\:dep 1 \:name \\"foo\\"})" "(emp \:dep)" "(let id 2 id2 3)" "(let [id 2 id2 3] id2)" "(let [id 2 id2 (id+1)] id2)" "(require '[hr.views.welcom \:as w])" "(require '[hr.views.welcome \:as w])" "(list-departments)" "(use [hr.views.welcome \:as w])" "(use '[hr.views.welcome \:as w])" "(list-departments)" "(use hr.views.welcome \:as w)" "(add-department {\:name \\"laitos1\\"})" "(list-departments)" "(get-department 0)" "(get-department 1)" "(list-departments)" "(add-department {\:name \\"laitos1\\"})" "(list-departments)" "(defn next-id [] do (swap\! id-seq inc) (@id-seq))" "(next-id)" "(print next-id)" "(defn next-id [] (do (swap\! id-seq inc) (@id-seq)))" "(def departments (atom {}))" "(list-departments)" "(add-department {\:name \\"laitos1\\"})" "(doc swap\!)" "(def foo atom {0})" "(def foo atom {})" "(def foo (atom {}))" "(swap\! foo inc)" "(def foo (atom 0))" "(swap\! foo inc)" "(defn foo2 [] (swap\! foo inc))" "foo2" "(foo2)" "(list-departments)" "(add-department {\:name \\"laitos1\\"})" "(list-departments)" "(get-department 1)" "(add-employee {\:department 1 \:name \\"testi\\"})" "(defn add-employee [employee]\\n  (let [id (next-id)]\\n    (swap\! employees assoc id {employee})\\n      employees))" "(defn add-employee [employee]\\n  (let [id (next-id)]\\n    (swap\! employees assoc id employee)\\n      employees))" "(add-employee {\:department 1 \:name \\"testi\\"})" "(defn list-emps [] @employees)" "(list-emps)" "(defn emps-of-dept [dept-id] filter \#(\= dept-id % \:department))" "(emps-of-dept 1)" "(defn emps-of-dept [dept-id] (filter \#(\= dept-id % \:department)))" "(emps-of-dept 1)" "(defn emps-of-dept [dept-id] (filter \#(\= dept-id % \:department) list-emps))" "(emps-of-dept 1)" "(defn emps-of-dept [dept-id] (filter \#(\= dept-id % \:department) (list-emps)))" "(emps-of-dept 1)" "(list-emps)" "(defn emps-of-dept [dept-id] (filter \#(\= dept-id % \:department) (vals list-emps)))" "(list-emps)" "(emps-of-dept 1)" "(vals list-emps)" "(defn emps-of-dept [dept-id] (filter \#(\= dept-id % \:department) (vals (list-emps))))" "(emps-of-dept 1)" "(vals (list-emps))" "(filter \#(\= 1 % \:department) (vals (list-emps)))" "(map \#(% \:department) (vals (list-emps)))" "(filter \#(\= (% \:department) 1) (vals (list-emps)))" "(defn emps-of-dept [dept-id] (filter \#(\= dept-id (% \:department)) (vals (list-emps))))" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/dao.clj" ";; Switching to hr.dao namespace" "(clojure.core/in-ns 'hr.dao)" "(list-emps)" "\u2018" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/dao.clj" ";; Switching to hr.dao namespace" "(clojure.core/in-ns 'hr.dao)" "(list-departments)" "(emps-of-dept)" "(emps-of-dept 1)" "(add-department {\:name \\"testi\\"})" "(list-departments)" "(add-employee {\:department 1 \:name \\"Janne\\"})" "(emps-of-dept 2)" "(emps-of-dept 1)" "(map \#(\:keys %) (list-departments))" "(map \#(% \:keys) (list-departments))" "(map \#(% \:key) (list-departments))" "(map \#(% \:name) (list-departments))" "(map \#(% 1) (list-departments))" "(map \#(% 0) (list-departments))" "(map \#(% \:val) (list-departments))" "(map \#({(% 0) (% 1) (count (emps-of-dept % 0))}) (list-departments))" "(map \#({(% 0) (% 1) (count (emps-of-dept (% 0)))}) (list-departments))" "(map \#({(% 0) (% 1)}) (list-departments))" "(map \#({(% 0)}) (list-departments))" "(map \#(% 0) (list-departments))" "(map \#(% 0 % 1) (list-departments))" "(map \#({\:id % 0}) (list-departments))" "(map \#({\:id (% 0)}) (list-departments))" "(map \#(key %) (list-departments))" "(map \#({\:id (key %)}) (list-departments))" "(map \#({\:id 1}) (list-departments))" "(map \#({\:id 1} %) (list-departments))" "(map (fn [id key] id) (list-departments))" "(map (fn [id] id) (list-departments))" "(map (fn [id val] id) (list-departments))" "(map (fn [id name] id) (list-departments))" "(map (fn [{id {\:name name}}] id) (list-departments))" "(map (fn [{id {\:name name}}] name) (list-departments))" "(map (fn [{id {\:name foo}}] foo) (list-departments))" "(map (fn [{key id {\:name foo}}] foo) (list-departments))" "(map (fn [{(key id) {\:name foo}}] foo) (list-departments))" "(map (fn [{% 0 id {\:name foo}}] foo) (list-departments))" "(map (fn [dept] (dept)) (list-departments))" "(map (fn [dept] dept) (list-departments))" "(map (fn [dept] \:key dept) (list-departments))" "(map (fn [dept] (key dept)) (list-departments))" "(map (fn [dept] ({\:id key dept})) (list-departments))" "(map (fn [dept] ({\:id (key dept)})) (list-departments))" "(def foo {1 {\:name \\"testi\\"}})" "(let [{id _ {nam \:name}} foo] (println nam))" "(def foo {\:id 1 {\:name \\"testi\\"}})" "(def foo {1 {\:name \\"testi\\"}})" "(let [{id {nam \:name}} foo] (println nam))" "(let [{x {y}} foo] (println x))" "(let [{x} foo] (println x))" "(let [{x y} foo] (println x))" "(let [{x _} foo] (println x))" "(let [{_ x} foo] (println x))" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/dao.clj" "(defn delete-department [id]\\n  (let [deleted-dep (get-department id)]\\n    (swap\! departments dissoc id)\\n    deleted-dep))" "(list-departments)" "(list-emps)" "(assoc 1 {\:foo foo})" "(assoc 1 {\:foo foo} {})" "(def foo {})" "(assoc 1 {\:foo foo} foo)" "(assoc foo 1 {\:foo foo})" "(assoc foo 1 {\:foo \\"test\\"})" "(defn crap (assoc foo 1 {\:foo \\"test\\"}))" "(defn crap \\n  \\n  assoc foo 1 {\:foo \\"test\\"})" "(def crap assoc foo 1 {\:foo \\"test\\"})" "(def crap (assoc foo 1 {\:foo \\"test\\"}))" "(crap)" "(print crap)" "(foo)" "(print foo)" "(def crap (assoc foo \:department-id 1 \:details {\:foo \\"test\\"}))" "(print crap)" "(def crap (assoc foo \:department-id 2 \:details {\:foo \\"test2\\"}))" "(print crap)" "(def crap (assoc foo 1 {\:foo \\"test\\"}))" "(print crap)" "(doc for\\n     \\n     )" "(def crap (assoc crap 1 {\:foo \\"test\\"}))" "(print crap)" "(def crap (assoc crap 2 {\:foo \\"test2\\"}))" "(print crap)" "(for [k v] crap)" "(doc for)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/dao.clj" ";; Switching to hr.dao namespace" "(clojure.core/in-ns 'hr.dao)" "(def x {0 {\:name \\"test\\"}})" "(assoc-in x [0 \:name] \\"test2\\")" "(update-in x [0 \:name] \\"test2\\")" "(update-in x [0 \:name] str \\"test2\\")" "(update-in x [0 \:name] str \\"test2\\" \\"test3\\"\\n           )" "(seq [key val] x)" "(doc seq)" "(seq x)" "(for [key val] (seq x))" "(for [key val] x (x))" "(for [[key val] x] key)" "(for [[key val] x] val)" "(def x {0 {\:name \\"test\\"}, 1 {\:name \\"test2\\"}})" "(for [[key val] x] val)" "(for [[key val] x] (assoc val \:id key ))" "(for [[key val] x] (assoc val \:id key \:foo key))" "(for [[key val] x] (assoc val \:id key \:emp-count key))" "(count emps-of-dept)" "(defn list-departments-with-empcount []\\n  (for [[dept-id dept-details] list-departments] \\n    (assoc dept-details \:id id \:emp-count (count (emps-of-dept))))" "(defn list-departments-with-empcount []\\n  (for [[dept-id dept-details] list-departments] \\n    (assoc dept-details \:id id \:emp-count (count (emps-of-dept)))))" "(defn list-departments-with-empcount []\\n  (for [[dept-id dept-details] list-departments] \\n    (assoc dept-details \:id dept-id \:emp-count (count (emps-of-dept)))))" "(doc count)" "(doc match)" "(defn count-matching [coll predicate] (count (filter predicate coll)))" "(count-matching (vals x) \#(\= \:foo %))" "(print x)" "(count-matching (vals x) \#(\= \\"test2\\" (\:name %))" "(count-matching (vals x) \#(\= \\"test2\\" (% \:name))" "(count-matching (vals x) \#(\= \\"test2\\" (% \:name)))" "(count-matching (vals x) \#(\= \\"test\\" (% \:name)))" "(count-matching (vals x) \#(\= \\"test12\\" (% \:name)))" "(add-department {\:name \\"foo\\"})" "(add-department {\:name \\"foo2\\"})" "(add-department {\:name \\"foo3\\"})" "(add-employee {\:department 1 \:name \\"emp1\\"})" "(add-employee {\:department 1 \:name \\"emp2\\"})" "(add-employee {\:department 2 \:name \\"emp3\\"})" "(add-employee {\:department 2 \:name \\"emp4\\"})" "(list-departments-with-empcount)" "(defn list-departments-with-empcount []\\n  (for [[dept-id dept-details] (list-departments)] \\n    (assoc dept-details \:id dept-id \:emp-count (count (emps-of-dept)))))" "(list-departments-with-empcount)" "(defn list-departments-with-empcount []\\n  (for [[dept-id dept-details] (list-departments)] \\n    (assoc dept-details \:id dept-id \:emp-count (count (emps-of-dept dept-id)))))" "(list-departments-with-empcount)" "(into {} \\n      list-departments-with-empcount)" "(into {} (list-departments-with-empcount))" "(seq (list-departments-with-empcount))" "(list-departments-with-empcount)" "(count (list-departments-with-empcount))" "(type (list-departments-with-empcount))" "(into-array [] (list-departments-with-empcount))" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/dao.clj" "(defn add-entity-with-id [target-atom entity]\\n  (let [id (next-id)]\\n    (swap\! target-atom assoc id entity)\\n      id))" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/dao.clj" "(defn add-employee [employee]\\n  ;todo validate\\n  (add-entity-with-id employees employee))" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/dao.clj" "(list-departments-with-empcount)" "(add-department {\:name \\"foo\\"})" "(list-departments-with-empcount)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/welcome.clj" ";; Switching to hr.views.welcome namespace" "(clojure.core/in-ns 'hr.views.welcome)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/server.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/dao.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/server.clj" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/server.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/welcome.clj" "(doc use)" "(\:use doc)" "(\:use hr.server)" "(\:use [hr.server])" "(\:use '[hr.server])" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/welcome.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/server.clj" ";; Switching to hr.server namespace" "(clojure.core/in-ns 'hr.server)" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/welcome.clj" "(clojure.core/in-ns 'hr.views.welcome)\\nnull\\n(clojure.core/in-ns 'hr.server)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/welcome.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/server.clj" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/welcome.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/server.clj" ";; Switching to hr.server namespace" "(clojure.core/in-ns 'hr.server)" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/server.clj" ";; Switching to hr.server namespace" "(clojure.core/in-ns 'hr.server)" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/server.clj" ";; Switching to hr.server namespace" "(clojure.core/in-ns 'hr.server)" "(-main)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage [\:post \\"/add-department\\"] {department \:json}\\n         (str \\"ok\\" department))\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage [\:post \\"/api/add-department\\"] {department \:json}\\n         (str \\"ok\\" department))\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\nnull\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage [\:post \\"/api/add-department\\"] {department \:json}\\n         (str \\"ok\\" department))\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage [\:post \\"/api/add-department\\"] {department \:json}\\n         ;(str \\"ok\\" department))\\n         (dao/add-department department))\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\nnull\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage [\:post \\"/api/add-department\\"] {department \:json}\\n         (str \\"ok\\" department))\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage [\:post \\"/api/add-department\\"] {department \:json}\\n         ;(str \\"ok\\" department))\\n         (str (dao/add-department department)))\\n(clojure.core/in-ns 'hr.server)" "(dao/list-departments)" "(\:use '[hr.dao \:as dao])" "(dao/list-departments)" "(\:use \\n  [hr.dao \:as dao])" "(list-departments)" "(\:require '[hr.dao \:as dao])" "(list-departments)" "(dao/list-departments)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage \\"/api/departments\\" []\\n         (str count((dao/list-departments)))\\n\\n(defpage [\:post \\"/api/add-department\\"] {department \:json}\\n         (str (dao/add-department department)))\\n(clojure.core/in-ns 'hr.server)" "(defpage [\:post \\"/api/add-department\\"] {department \:json}\\n         (str (dao/add-department department)))" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/server.clj" ";; Switching to hr.server namespace" "(clojure.core/in-ns 'hr.server)" "(-main)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage \\"/api/departments\\" []\\n         (str (count(dao/list-departments))))\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage [\:post \\"/api/add-department\\"] {department \:json}\\n         (str (dao/add-department department)))\\n(clojure.core/in-ns 'hr.server)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/server.clj" ";; Switching to hr.server namespace" "(clojure.core/in-ns 'hr.server)" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/common.clj" ";; Switching to hr.server namespace" "(clojure.core/in-ns 'hr.server)" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/server.clj" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/mainpage.clj" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/mainpage.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/common.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/mainpage.clj" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/mainpage.clj" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/common.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/mainpage.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/common.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/mainpage.clj" "(-main)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/mainpage.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/dao.clj" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/mainpage.clj" "(-main)" "(clojure.core/in-ns 'hr.views.welcome)\\nnull\\n(clojure.core/in-ns 'hr.server)" ";; Loading file /Users/janne/dev/eclipsews/hr/src/hr/views/mainpage.clj" "(clojure.core/in-ns 'hr.views.common)\\n(defpartial layout [& content]\\n            (html5\\n              [\:head\\n               [\:title \\"hr\\"]\\n               (include-css \\"/css/reset.css\\")\\n               (include-css \\"/css/hr.css\\")\\n               (include-js \\"/js/jquery-1.8.1.min.js\\")\\n               (include-js \\"/js/knockout-2.1.0.debug.js\\")\\n               (include-js \\"/js/mainpage.js\\")\\n               ]\\n              [\:body\\n               [\:div\#wrapper\\n                content]]))\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage \\"/welcome\\" []\\n         (common/layout\\n           [\:form {\:data-bind \\"submit\: addDepartment\\"}\\n             [\:p \\"Add department\: \\"]\\n             [\:input {\:data-bind \\"value\: newDepartmentText\\" \:placeholder \\"department name\\"}]\\n             [\:button {\:type \\"submit\\"} \\"Save\\"]\\n           ]\\n           [\:ul.departments {\:data-bind \\"foreach\: departments, visible\: departments().length > 0\\"}\\n            [\:li \\n             [\:p {\:data-bind \\"text\: name\\"} \\"\\"]\\n             ;[\:p \\"helloworld\\"]\\n             [\:a {\:data-bind \\"click\: $parent.removeDepartment\\" \:href \\"\#\\"} \\"Delete\\"]\\n            ]\\n           ]\\n         ))\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage \\"/welcome\\" []\\n         (common/layout\\n           [\:form.adddepartment {\:data-bind \\"submit\: addDepartment\\"}\\n             [\:p \\"Add department\: \\"]\\n             [\:input {\:data-bind \\"value\: newDepartmentText\\" \:placeholder \\"department name\\"}]\\n             [\:button {\:type \\"submit\\"} \\"Save\\"]\\n           ]\\n           [\:ul.departments {\:data-bind \\"foreach\: departments, visible\: departments().length > 0\\"}\\n            [\:li \\n             [\:p {\:data-bind \\"text\: name\\"} \\"\\"]\\n             ;[\:p \\"helloworld\\"]\\n             [\:a {\:data-bind \\"click\: $parent.removeDepartment\\" \:href \\"\#\\"} \\"Delete\\"]\\n            ]\\n           ]\\n         ))\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage \\"/welcome\\" []\\n         (common/layout\\n           [\:form.adddepartment {\:data-bind \\"submit\: addDepartment\\"}\\n             [\:p \\"Add department\: \\"]\\n             [\:input {\:data-bind \\"value\: newDepartmentText\\" \:placeholder \\"department name\\"}]\\n             [\:button {\:type \\"submit\\"} \\"Save\\"]\\n           ]\\n           [\:ul.departments {\:data-bind \\"foreach\: departments, visible\: departments().length > 0\\"}\\n            [\:li \\n             [\:p {\:data-bind \\"text\: name\\"} \\"\\"]\\n             [\:p {\:data-bind \\"text\: empcount\\"} \\"\\"]\\n             ;[\:p \\"helloworld\\"]\\n             [\:a {\:data-bind \\"click\: $parent.removeDepartment\\" \:href \\"\#\\"} \\"Delete\\"]\\n            ]\\n           ]\\n         ))\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage \\"/welcome\\" []\\n         (common/layout\\n           [\:form.adddepartment {\:data-bind \\"submit\: addDepartment\\"}\\n             [\:p \\"Add department\: \\"]\\n             [\:input {\:data-bind \\"value\: newDepartmentText\\" \:placeholder \\"department name\\"}]\\n             [\:button {\:type \\"submit\\"} \\"Save\\"]\\n           ]\\n           [\:ul.departments {\:data-bind \\"foreach\: departments, visible\: departments().length > 0\\"}\\n            [\:li \\n             [\:p \\"helloworld\\"]\\n            ]\\n            [\:li \\n             [\:p {\:data-bind \\"text\: name\\"} \\"\\"]\\n             [\:p {\:data-bind \\"text\: empcount\\"} \\"\\"]\\n             ;[\:p \\"helloworld\\"]\\n             [\:a {\:data-bind \\"click\: $parent.removeDepartment\\" \:href \\"\#\\"} \\"Delete\\"]\\n            ]\\n           ]\\n         ))\\n(clojure.core/in-ns 'hr.server)" "(clojure.core/in-ns 'hr.views.welcome)\\n(defpage \\"/welcome\\" []\\n         (common/layout\\n           [\:form.adddepartment {\:data-bind \\"submit\: addDepartment\\"}\\n             [\:p \\"Add department\: \\"]\\n             [\:input {\:data-bind \\"value\: newDepartmentText\\" \:placeholder \\"department name\\"}]\\n             [\:button {\:type \\"submit\\"} \\"Save\\"]\\n           ]\\n           [\:ul.departments {\:data-bind \\"foreach\: departments, visible\: departments().length > 0\\"}\\n            [\:li \\n             [\:p {\:data-bind \\"text\: name\\"} \\"\\"]\\n             [\:p {\:data-bind \\"text\: empcount\\"} \\"\\"]\\n             [\:a {\:data-bind \\"click\: $parent.removeDepartment\\" \:href \\"\#\\"} \\"Delete\\"]\\n            ]\\n           ]\\n         ))\\n(clojure.core/in-ns 'hr.server)"]
eclipse.preferences.version=1
